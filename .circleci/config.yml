version: 2.1

setup: << pipeline.parameters.run-setup >>

parameters:
  run-setup:
    description: Whether it is a setup workflow or a continuation
    type: boolean
    default: true
  force-all:
    description: Emergency valve - forcibly build all the modules
    type: boolean
    default: false


jobs:
  percy-finalize:
    docker:
      - image: percyio/agent
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
    steps:
      - run: percy finalize --all

  artifacts:
    docker:
      - image: circleci/python:3.9.2-buster-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
          PYVERSION: python39
    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
      - attach_workspace:
          at: ~/dash
      - store_artifacts:
          path: ~/dash/packages
          destination: /tmp/packages

  lint-unit-39: &lint-unit
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.9.2-buster-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
          PYLINTRC: .pylintrc39
          PYVERSION: python39

    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
      - run:
          name: ️️🏗️ pip dev requirements
          command: |
            sudo pip install --upgrade virtualenv --progress-bar off
            python -m venv venv || virtualenv venv && . venv/bin/activate
            pip install -e . --no-cache-dir -r requires-install.txt -r requires-dev.txt -r requires-testing.txt --progress-bar off
      - save_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
          paths:
            - venv
      - run:
          name: 🌸 Python & JS Lint
          command: |
            . venv/bin/activate
            set -eo pipefail
            cd dash/dash-renderer && renderer build && cd ../../
            pip install -e . --progress-bar off && pip list | grep dash
            npm install --production && npm run initialize
            npm run lint
      - run:
          name: 🐍 Python Unit Tests & ☕ JS Unit Tests
          command: |
            . venv/bin/activate
            npm run citest.unit

  lint-unit-36:
    <<: *lint-unit
    docker:
      - image: circleci/python:3.6.13-stretch-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
          PYLINTRC: .pylintrc
          PYVERSION: python36

  build-core-39: &build-core
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.9.2-buster-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
          PYVERSION: python39
    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
      - run:
          name: ️🏗️ pip dev requirements
          command: |
            sudo pip install --upgrade virtualenv
            python -m venv venv || virtualenv venv && . venv/bin/activate
            sed -i '/dash-/d' requires-install.txt
            pip install -e . --no-cache-dir -r requires-install.txt -r requires-dev.txt -r requires-testing.txt --progress-bar off
      - save_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
          paths:
            - venv
      - run:
          name: ️️🏗️ build core
          command: |
            . venv/bin/activate && pip install --no-cache-dir --upgrade -e . --progress-bar off && mkdir packages
            cd dash/dash-renderer && renderer build && cd ../../ && python setup.py sdist && mv dist/* packages/
            git clone --depth 1 https://github.com/plotly/dash-core-components.git
            cd dash-core-components && npm ci && npm run build && python setup.py sdist && mv dist/* ../packages/  && cd ..
            ls -la packages
      - persist_to_workspace:
          root: ~/dash
          paths:
            - packages/*.tar.gz

  build-core-36:
    <<: *build-core
    docker:
      - image: circleci/python:3.6.13-stretch-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
          PYVERSION: python36

  build-misc-39: &build-misc
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.9.2-buster-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
          PYVERSION: python39

    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
      - run:
          name: ️️🏗️ pip dev requirements
          command: |
            sudo pip install --upgrade virtualenv --quiet
            python -m venv venv || virtualenv venv && . venv/bin/activate
            pip install -e . --no-cache-dir -r requires-install.txt -r requires-dev.txt -r requires-testing.txt --progress-bar off
      - save_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
          paths:
            - venv
      - run:
          name: ️️🏗️ build misc
          command: |
            . venv/bin/activate && pip install --no-cache-dir --upgrade -e . --progress-bar off && mkdir packages
            git clone --depth 1 https://github.com/plotly/dash-table.git
            cd dash-table && npm ci && npm run build && python setup.py sdist && mv dist/* ../packages/ && cd ..
            git clone --depth 1 https://github.com/plotly/dash-html-components.git
            cd dash-html-components && npm ci && npm run build && python setup.py sdist && mv dist/* ../packages/ && cd ..
            ls -la packages
      - persist_to_workspace:
          root: ~/dash
          paths:
            - packages/*.tar.gz

  build-misc-36:
    <<: *build-misc
    docker:
      - image: circleci/python:3.6.13-stretch-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
          PYVERSION: python36

  build-windows-39:
    working_directory: ~/dash
    executor:
      name: win/default
      shell: bash.exe
    environment:
      PYVERSION: python39
    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - run:
          name: ️️🏗️ build core
          command: |
            pip install --no-cache-dir --upgrade -e .[dev,testing] --progress-bar off
            cd dash/dash-renderer && renderer build && cd ../../ && python setup.py sdist && mv dist/* packages/
            git clone --depth 1 https://github.com/plotly/dash-core-components.git
            cd dash-core-components && npm ci && npm run build && python setup.py sdist && cd ..

  test-39: &test
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.9.2-buster-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
          PERCY_PARALLEL_TOTAL: -1
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: True
          PYVERSION: python39
    parallelism: 3
    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - restore_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
      - attach_workspace:
          at: ~/dash
      - run:
          name: ️️🏗️ Install packages
          command: |
            . venv/bin/activate
            npm install --production
            cd packages && ls -la
            find . -name "*.gz" | xargs pip install --no-cache-dir --ignore-installed && cd ..
            sed -i '/dash/d' requires-install.txt
            pip install --no-cache-dir --ignore-installed .
            pip list | grep dash
      - run:
          name: 🧪 Run Integration Tests
          command: |
            . venv/bin/activate
            npm run citest.integration
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: /tmp/dash_artifacts
      - run:
          name: 🦔 percy finalize
          command: npx percy finalize --all
          when: on_fail

  test-36:
    <<: *test
    docker:
      - image: circleci/python:3.6.13-stretch-node-browsers
        auth:
          username: dashautomation
          password: $DASH_PAT_DOCKERHUB
        environment:
          PERCY_ENABLE: 0
          PYVERSION: python36


workflows:
  # The setup workflow
  python3.9:
    jobs:
      - lint-unit-39
      - build-core-39
      - build-windows-39
      - build-misc-39
      - test-39:
          requires:
            - build-core-39
            - build-misc-39
      - percy-finalize:
          requires:
            - test-39
      - artifacts:
          requires:
            - percy-finalize
          filters:
            branches:
              only:
                - master
                - dev
            tags:
              only: /v*/

  python3.6:
    jobs:
      - lint-unit-36
      - build-core-36
      - build-misc-36
      - test-36:
          requires:
            - build-core-36
            - build-misc-36

  setup-workflow:
    when: << pipeline.parameters.run-setup >>
    jobs:
      - config-splitting/setup-dynamic-config:
          force-all: << pipeline.parameters.force-all >>
          base-revision: dev
          modules: |
            components/dash-core-components
            components/dash-html-components
            components/dash-table


orbs:
  win: circleci/windows@2.4.0

  # An "embedded" orb to facilitate config splitting
  config-splitting:
    # Dependencies
    orbs:
      continuation: circleci/continuation@0.2.0
    # Commands for the setup workflow
    commands:
      list-changed-modules:
        parameters:
          modules:
            description: |
              Directories which should be built upon changes.
              Each row represents a space-separated list of the root directories for modules, each of which must has own `.circleci/config.yml`.
              The first item of the list will be tested for changes, and will be added to the filtered list of modules if there are any changes.
              The subsequent items, if there are any, will also be added to the filtered list of modules if there are any changes in the directory specified as the first item.
              CAVEAT: Directory names having white spaces cannot be specified.
            type: string
          modules-filtered:
            description: Path to the file where the filtered list of modules is generated
            type: string
            default: /tmp/modules-filtered.txt
          base-revision:
            description: Revision to compare with the current HEAD
            type: string
            default: main
          force-all:
            description: Emergency valve - forcibly build all the modules
            type: boolean
            default: false
        steps:
          - run:
              name: Generate the list of modules having changes
              command: |
                # Add each module to `modules-filtered` if 1) `force-all` is set to `true`, 2) there is a diff against `base-revision`, 3) there is no `HEAD~1` (i.e., this is the very first commit for the repo) OR 4) there is a diff against the previous commit
                cat \<< EOD | sed -e '/^$/d' | while read row; do module="$(echo "$row" | awk '{ print $1 }')"; if [ << parameters.force-all >> == 'true' ] || [ $(git diff --name-only << parameters.base-revision >> "$module" | wc -l) -gt 0 ] || (! git rev-parse --verify HEAD~1) || [ $(git diff --name-only HEAD~1 "$module" | wc -l) -gt 0 ]; then echo "$row" | sed -e 's/ /\n/g' >> << parameters.modules-filtered >>; fi; done
                << parameters.modules >>
                EOD
      merge-modular-configs:
        parameters:
          modules:
            description: Path to the file for the list of the modules to build
            type: string
            default: /tmp/modules-filtered.txt
          shared-config:
            description: Path to the config providing shared resources (such as prerequisite jobs and common commands)
            type: string
            default: .circleci/workflows.yml
          continue-config:
            description: Path to the internally-used config for continuation
            type: string
            default: .circleci/continue-config.yml
        steps:
          - run:
              name: Merge configs
              command: |
                # If `modules` is unavailable, stop this job without continuation
                if [ ! -f "<< parameters.modules >>" ] || [ ! -s "<< parameters.modules >>" ]
                then
                  echo 'Nothing to merge. Halting the job.'
                  circleci-agent step halt
                  exit
                fi
                # Convert a list of dirs to a list of config.yml
                sed -i -e 's/$/\/.circleci\/config.yml/g' "<< parameters.modules >>"
                # If `shared-config` exists, append it at the end of `modules`
                if [ -f << parameters.shared-config >> ]
                then
                  echo "<< parameters.shared-config >>" >> "<< parameters.modules >>"
                fi
                xargs -a "<< parameters.modules >>" yq -y -s 'reduce .[] as $item ({}; . * $item)' | tee "<< parameters.continue-config >>"
    jobs:
      # The job for the setup workflow
      setup-dynamic-config:
        parameters:
          modules:
            description: Directories which should be tested for changes; one directory per line. Each directory must have `.circleci/config.yml`.
            type: string
          base-revision:
            description: Revision to compare with the current HEAD
            type: string
            default: main
          force-all:
            description: Emergency valve - forcibly build all the modules
            type: boolean
            default: false
          modules-filtered:
            description: Path to the file where the filtered list of modules is generated
            type: string
            default: /tmp/modules-filtered.txt
          shared-config:
            description: Path to the config providing shared resources (such as prerequisite jobs and common commands)
            type: string
            default: .circleci/config.yml
          continue-config:
            description: Path to the internally-used config for continuation
            type: string
            default: .circleci/continue-config.yml
        docker:
          - image: cimg/python:3.9
        steps:
          - checkout
          - run:
              name: Install yq
              command: pip install yq
          - list-changed-modules:
              modules: << parameters.modules >>
              modules-filtered: << parameters.modules-filtered >>
              base-revision: << parameters.base-revision >>
              force-all: << parameters.force-all >>
          - merge-modular-configs:
              shared-config: << parameters.shared-config >>
              modules: << parameters.modules-filtered >>
              continue-config: << parameters.continue-config >>
          - continuation/continue:
              configuration_path: << parameters.continue-config >>
              parameters: '{"run-setup":false}'
